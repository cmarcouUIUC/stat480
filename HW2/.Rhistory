# Load Data
bubblewrap <- read.csv("bubblewrap.csv")
# Remove Runs 2,3, and 5 for Replication 2
# Rows 11, 12, 17
bubblewrap <- bubblewrap[-c(11, 12, 17), ]
# Convert to factors
bubblewrap <- bubblewrap %>%
mutate(loading = as.factor(loading)) %>%
mutate(line_speed = as.factor(line_speed))
# Checking Full Model vs Additive Model using partial F test since we have an unbalanced ANOVA
full.model = lm(rate~line_speed*loading, bubblewrap)
additive.model = lm(rate~line_speed+loading, bubblewrap)
anova(additive.model, full.model)
# Fail To reject the null so the interaction term is not statistically significant and we select the additive model
# Checking Main Effects
line_speed.model = lm(rate~line_speed, bubblewrap)
loading.model = lm(rate~loading, bubblewrap)
anova(line_speed.model, additive.model)
anova(loading.model, additive.model)
# We reject the line_speed.model at alpha = 0.1
# We fail to reject the loading.model
# Choosing the Loading Model
# Pairwise Comparisons
pairwise.t.test(bubblewrap$rate, bubblewrap$loading, p.adjust.method = "bonferroni")
#Loadings 2 and 4 are different
# Little bit of EDA
bubblewrap %>%
mutate(loading = as.factor(loading)) %>%
ggplot(aes(x = loading, y = rate)) +
geom_boxplot() +
ggtitle("Rate Distributions By Loading")
bubblewrap %>%
group_by(loading) %>%
summarize(mean_rate = mean(rate), variance = var(rate))
# single 95% CI for difference between loadings 2 and 4
# Need to test for equal variance between the groups but guessing not
# Using Fischer's F Test
bubblewrap2 <- bubblewrap %>%
filter(loading == 2)
bubblewrap4 <- bubblewrap %>%
filter(loading == 4)
var.test(bubblewrap2$rate, bubblewrap4$rate)
# Yep, unequal variance so using a Welch's t-interval
t.test(bubblewrap2$rate, bubblewrap4$rate, var.equal = FALSE)
# 95% CI for a difference in means between loading 2 and 4 [-127.58643, -23.80246]
# We chose loading 4 as the highest production rate and line_speed is not significant
## Checking model assumptions
par(mfrow=c(1,2))
qqnorm(loading.model$res)
plot(loading.model$fitted, loading.model$res, xlab="Fitted", ylab="Residuals")
## We can note that the plot to check constant variance on the right, has a funneling inwards as we progress along the x axis. Additionally, based on the Q-Q plot normality seems light it might be questionable.
##Let's check if Box-Cox helps us here.
library(MASS)
loading.transformation=boxcox(loading.model,lambda=seq(-2,2, length=400))
lambda <- loading.transformation$x[which.max(loading.transformation$y)]
lambda
loading.transformation=boxcox(loading.model,lambda=seq(-2,2, length=400))
##Let's check if Box-Cox helps us here.
library(MASS)
loading.transformation=boxcox(loading.model,lambda=seq(-2,3, length=400))
lambda <- loading.transformation$x[which.max(loading.transformation$y)]
lambda
##Let's check if Box-Cox helps us here.
library(MASS)
loading.transformation=boxcox(loading.model,lambda=seq(-2,3, length=400))
lambda <- loading.transformation$x[which.max(loading.transformation$y)]
lambda
##Let's check if Box-Cox helps us here.
library(MASS)
loading.transformation=boxcox(loading.model,lambda=seq(-2,2, length=400))
lambda <- loading.transformation$x[which.max(loading.transformation$y)]
lambda
##Let's check if Box-Cox helps us here.
library(MASS)
loading.transformation=boxcox(loading.model,lambda=seq(-2,2, length=400))
lambda <- loading.transformation$x[which.max(loading.transformation$y)]
lambda
##Box Cox would likely suggest a higher number if it was not constrained between -2 and 2, but because in practice it is only reccomended to use the technique within this range, we will stick with a lambda of 2
bubblewrap.transformed <- bubblewrap %>%
mutate(rate = (rate^lambda - 1)/ lambda)
transformed.loading.model = lm(rate~loading, bubblewrap.transformed)
#Rechecking model assumptions
par(mfrow=c(1,2))
qqnorm(transformed.loading.model$res)
plot(transformed.loading.model$fitted, transformed.loading.model$res, xlab="Fitted", ylab="Residuals")
## Checking model assumptions
par(mfrow=c(1,2))
qqnorm(loading.model$res)
plot(loading.model$fitted, loading.model$res, xlab="Fitted", ylab="Residuals")
## We can note that the plot to check constant variance on the right, has a funneling inwards as we progress along the x axis. Additionally, based on the Q-Q plot normality seems light it might be questionable.
shapiro.test(loading.model$residuals)
## Let us check our assumptions on other possible models we examined earlier.
par(mfrow=c(1,2))
qqnorm(full.model$res)
plot(full.model$fitted, full.model$res, xlab="Fitted", ylab="Residuals")
## Let us check our assumptions on other possible models we examined earlier.
## The Full Model has a problem with constant variance funneling in as well
par(mfrow=c(1,2))
qqnorm(full.model$res)
plot(full.model$fitted, full.model$res, xlab="Fitted", ylab="Residuals")
par(mfrow=c(1,2))
qqnorm(additive.model$res)
plot(additive.model$fitted, additive.model$res, xlab="Fitted", ylab="Residuals")
## Let us check our assumptions on other possible models we examined earlier.
## The Full Model has a problem with constant variance funneling in as well
par(mfrow=c(1,2))
qqnorm(full.model$res)
plot(full.model$fitted, full.model$res, xlab="Fitted", ylab="Residuals")
par(mfrow=c(1,2))
qqnorm(additive.model$res)
plot(additive.model$fitted, additive.model$res, xlab="Fitted", ylab="Residuals")
par(mfrow=c(1,2))
qqnorm(line_speed.modell$res)
## Let us check our assumptions on other possible models we examined earlier.
## The Full Model has a problem with constant variance funneling in as well
par(mfrow=c(1,2))
qqnorm(full.model$res)
plot(full.model$fitted, full.model$res, xlab="Fitted", ylab="Residuals")
par(mfrow=c(1,2))
qqnorm(additive.model$res)
plot(additive.model$fitted, additive.model$res, xlab="Fitted", ylab="Residuals")
par(mfrow=c(1,2))
qqnorm(line_speed.model$res)
plot(line_speed.model$fitted, line_speed.model$res, xlab="Fitted", ylab="Residuals")
knitr::opts_chunk$set(echo = TRUE)
(-1.6)/sqrt((6.4*6.4))
knitr::opts_chunk$set(echo = TRUE)
pbinom(14, size=40, prob=.2, lower.tail=FALSE)
knitr::opts_chunk$set(echo = TRUE)
OR.est <- (14 * 381) / (49 * 75)
logOR <- log(OR.est)
logOR.se = sqrt(1/(14)+1/75++1/49+1/381))
OR.est <- (14 * 381) / (49 * 75)
logOR <- log(OR.est)
logOR.se = sqrt(1/(14)+1/75++1/49+1/381)
logOR.CI <- log(OR.est) + c(-1,1) * qnorm(1-0.05/2) * logOR.se
print('estimated log odds ratio:')
print(logOR)
print('wald CI for log odds ratio:')
print(logOR.CI)
print('wald CI for odds ratio:')
print(exp(logOR.CI))
coffeecounts<-glm(data=df2, Count ~ HiCoffee + MI + HiCoffee*MI, family='poisson')
qgamma(.9,10,3)
knitr::opts_chunk$set(echo = TRUE)
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(infectioncure, varying=list(c("yes","no")),
v.names="freq", timevar="response",
idvar=c("Defendant","Victim"), direction="wide")
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="response",
idvar=c("Defendant","Victim"), direction="wide")
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
deathp
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
deathp
dp
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim","DeathPenalty"), direction="wide")
dp
deathp
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim","DeathPenalty"), direction="wide")
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim","DeathPenalty"), direction="wide")
deathp
dp
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("Yes","No")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("Yes","No")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim","DeathPenalty"), direction="wide")
dp
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("Yes","No")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="DeathPenalty", timevar="Freq",
idvar=c("Defendant","Victim"), direction="wide")
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("yes","no")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
View(deathp)
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("Yes","No")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("Yes","No")),
v.names="freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
deathp <- read.table("deathpenalty.txt", header=TRUE)
dp <- reshape(deathp, varying=list(c("Yes","No")),
v.names="Freq", timevar="DeathPenalty",
idvar=c("Defendant","Victim"), direction="wide")
dp
# Additive model
mod <- glm(cbind(yes,no) ~ Factor(Defendant) + Factor(Victim),
family=binomial,
data=dp)
# Additive model
mod <- glm(cbind(Yes,No) ~ Factor(Defendant) + Factor(Victim),
family=binomial,
data=dp)
# Additive model
mod <- glm(cbind(Yes,No) ~ factor(Defendant) + factor(Victim),
family=binomial,
data=dp)
summary(mod)
OR <- exp(coef(mod)["factor(Defendant)white"])
OR
OR <- exp(coef(mod)["factor(Defendant)white"])
OR
exp(confint(mod))
OR <- exp(coef(mod)["factor(Defendant)white"])
OR
exp(confint(mod)["factor(Defendant)white",])
dp.array <- xtabs(freq ~ Defendant + Victim + DeathPenalty, data=deathp)
dp.array <- xtabs(Freq ~ Defendant + Victim + DeathPenalty, data=deathp)
dp.array
dp.array <- xtabs(Freq ~ Defendant + Victim + DeathPenalty, data=deathp)
dp.array
ORs <- dp.array[1,1,]*dp.array[2,2,]/(dp.array[1,2,]*dp.array[2,1,])
ORs
dp.array <- xtabs(Freq ~ Defendant + Victim + DeathPenalty, data=deathp)
dp.array
ORs <- dp.array[1,,1]*dp.array[2,,1]/(dp.array[1,,2]*dp.array[2,,1])
ORs
mantelhaen.test(dp.array, correct=FALSE)
totals <- apply(dp.array, 3, "sum")
totals
OR_MH <-
sum(dp.array[1,1,]*dp.array[2,2,]/totals) /
sum(dp.array[1,2,]*dp.array[2,1,]/totals)
OR_MH
mantelhaen.test(dp.array, correct=FALSE)
totals <- apply(dp.array, 3, "sum")
totals
OR_MH <-
sum(dp.array[1,,1]*dp.array[2,,1]/totals) /
sum(dp.array[1,,2]*dp.array[2,,1]/totals)
OR_MH
mantelhaen.test(dp.array, correct=FALSE)
dp.array <- xtabs(Freq ~ Defendant +  DeathPenalty + Victim, data=deathp)
dp.array
ORs <- dp.array[1,1,]*dp.array[2,1,]/(dp.array[1,2,]*dp.array[2,1,])
ORs
totals <- apply(dp.array, 3, "sum")
totals
OR_MH <-
sum(dp.array[1,1,]*dp.array[2,1,]/totals) /
sum(dp.array[1,2,]*dp.array[2,1,]/totals)
OR_MH
mantelhaen.test(dp.array, correct=FALSE)
dp.array <- xtabs(Freq ~ Defendant +  DeathPenalty + Victim, data=deathp)
dp.array
ORs <- dp.array[1,1,]*dp.array[2,2,]/(dp.array[1,2,]*dp.array[2,1,])
ORs
totals <- apply(dp.array, 3, "sum")
totals
OR_MH <-
sum(dp.array[1,1,]*dp.array[2,2,]/totals) /
sum(dp.array[1,2,]*dp.array[2,2,]/totals)
OR_MH
mantelhaen.test(dp.array, correct=FALSE)
totals <- apply(dp.array, 3, "sum")
totals
OR_MH <-
sum(dp.array[1,1,]*dp.array[2,2,]/totals) /
sum(dp.array[1,2,]*dp.array[2,1,]/totals)
OR_MH
mantelhaen.test(dp.array, correct=FALSE)
setwd("~/GitHub/stat480/HW2")
knitr::opts_chunk$set(echo = TRUE,
#include = TRUE,
fig.width = 6, fig.height = 4,
results = FALSE,
warning = FALSE,
cache = FALSE,
digits = 3,
width = 48)
## Read in the data
homes <- read.csv("homes2004.csv")
# conditional vs marginal value
par(mfrow=c(1,2)) # 1 row, 2 columns of plots
hist(homes$VALUE, col="grey", xlab="home value", main="")
plot(VALUE ~ factor(BATHS),
col=rainbow(8), data=homes[homes$BATHS<8,],
xlab="number of bathrooms", ylab="home value")
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.05]
# you'll want to replace .05 with your FDR cutoff
# you can use the `-AMMORT' type syntax to drop variables
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
pricey
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.05]
# you'll want to replace .05 with your FDR cutoff
# you can use the `-AMMORT' type syntax to drop variables
View(homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.05]
# you'll want to replace .05 with your FDR cutoff
# you can use the `-AMMORT' type syntax to drop variables
View(homes)
View(homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.05]
# you'll want to replace .05 with your FDR cutoff
# you can use the `-AMMORT' type syntax to drop variables
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
# you'll want to replace .05 with your FDR cutoff
# you can use the `-AMMORT' type syntax to drop variables
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT -ETRANSY -STATECO -STATECT -BEDRMS , data=homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT -ETRANSY -STATECO -STATECT -BEDRMS, data=homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT -ETRANSY -STATECO -STATECT -BEDRMS, data=homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT -STATECT -BEDRMS, data=homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT - ETRANSY -STATECO -STATECT -BEDRMS, data=homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .- AMMORT - ETRANSY -STATECO -STATECT -BEDRMS, data=homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT-ETRANSY -STATECO -STATECT -BEDRMS, data=homes)
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT -BEDRMS, data=homes)
# you'll want to replace .05 with your FDR cutoff
# you can use the `-AMMORT' type syntax to drop variables
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT -BEDRMS, data=homes)
summary(pricey2)
# you'll want to replace .05 with your FDR cutoff
# you can use the `-AMMORT' type syntax to drop variables
library(knitr) # library for nice R markdown output
# regress log(PRICE) on everything except AMMORT
pricey <- glm(log(LPRICE) ~ .-AMMORT, data=homes)
cor(pricey$fitted,log(homes$LPRICE))^2
summary(pricey)
# extract pvalues
pvals <- summary(pricey)$coef[-1,4]
# example: those variable insignificant at alpha=0.05
names(pvals)[pvals>.10]
pricey2 <- glm(log(LPRICE) ~ .-AMMORT -BEDRMS, data=homes) ##Need to drop categorical levels of etrany and stateco and statect ##Unless she would like to see those kept in
summary(pricey2)
cor(pricey2$fitted,log(homes$LPRICE))^2
# you'll want to replace .05 with your FDR cutoff
# you can use the `-AMMORT' type syntax to drop variables
# create a var for downpayment being greater than 20%
homes$gt20dwn <-
factor(0.2<(homes$LPRICE-homes$AMMORT)/homes$LPRICE)
# create a var for downpayment being greater than 20%
homes$gt20dwn <-
factor(0.2<(homes$LPRICE-homes$AMMORT)/homes$LPRICE)
pricey3 <- glm(homes$gt20dwn) ~ .-AMMORT -LPRICE, family=binomial data=homes)
# create a var for downpayment being greater than 20%
homes$gt20dwn <-
factor(0.2<(homes$LPRICE-homes$AMMORT)/homes$LPRICE)
pricey3 <- glm(homes$gt20dwn) ~ .-AMMORT -LPRICE, family=binomial, data=homes)
# create a var for downpayment being greater than 20%
homes$gt20dwn <-
factor(0.2<(homes$LPRICE-homes$AMMORT)/homes$LPRICE)
pricey3 <- glm(homes$gt20dwn) ~ .-AMMORT -LPRICE,  data=homes)
# create a var for downpayment being greater than 20%
homes$gt20dwn <-
factor(0.2<(homes$LPRICE-homes$AMMORT)/homes$LPRICE)
pricey3 <- glm(homes$gt20dwn) ~ .-AMMORT -LPRICE ,data=homes)
# create a var for downpayment being greater than 20%
homes$gt20dwn <-
factor(0.2<(homes$LPRICE-homes$AMMORT)/homes$LPRICE)
pricey3 <- glm(homes$gt20dwn ~ .-AMMORT -LPRICE ,data=homes, family=binomial)
