knitr::opts_chunk$set(echo = TRUE,
#include = TRUE,
fig.width = 6, fig.height = 4,
warning = FALSE,
message = FALSE,
cache = TRUE,
digits = 3,
width = 48)
## actors network example
library(igraph)
### GRAPH
## read in a graph in the `graphml' format: xml for graphs.
## it warns about pre-specified ids, but we want this here
## (these ids match up with the castlists in movies.txt)
actnet <- read.graph("actors.graphml",format="graphml")
### TRANSACTION
## read in the table of actor ids for movies
## this is a bit complex, because the movie names
## contain all sorts of special characters.
movies <- read.table("movies.txt", sep="\t",
row.names=1, as.is=TRUE, comment.char="", quote="")
## it's a 1 column matrix.  treat it like a vector
movies <- drop(as.matrix(movies))
## each element is a comma-separated set of actor ids.
## use `strsplit' to break these out
movies <- strsplit(movies,",")
## and finally, match ids to names from actnet
casts <- lapply(movies,
function(m) V(actnet)$name[match(m,V(actnet)$id)])
## check it
casts['True Romance']
## format as arules transaction baskets
library(arules)
casttrans <- as(casts, "transactions")
## Set up STM information
castsize <- unlist(lapply(casts, function(m) length(m)))
## see ?rep.int: we're just repeating movie names for each cast member
acti <- factor(rep.int(names(casts),times=castsize))
## actors
actj <- factor(unlist(casts), levels=V(actnet)$name)
## format as STM (if you specify without `x', its binary 0/1)
actmat <- sparseMatrix(i=as.numeric(acti),j=as.numeric(actj),
dimnames=list(movie=levels(acti),actor=levels(actj)))
## count the number of appearences by actor
nroles <- colSums(actmat)
names(nroles) <- colnames(actmat)
plot(actnet, vertex.frame.color=0, vertex.size=3, edge.arrow.size=.2)
#one link away
edgemat <- cbind(get.edgelist(actnet)[,1], get.edgelist(actnet)[,2])
actlink <- graph.edgelist(edgemat)
bacon <- graph.neighborhood(actlink, 1, V(actlink)["Bacon, Kevin"],mode="in")[[1]]
plot(bacon,  vertex.frame.color=0, edge.arrow.width=.3)
gsize(bacon) #edge count
#two links away
bacon2 <- graph.neighborhood(actlink, 2, V(actlink)["Bacon, Kevin"],mode="in")[[1]]
plot(bacon2,  vertex.frame.color=0, edge.arrow.width=.3)
gsize(bacon2)
#three links away
bacon3 <- graph.neighborhood(actlink, 3, V(actlink)["Bacon, Kevin"],mode="in")[[1]]
plot(bacon3,  vertex.frame.color=0, edge.arrow.width=.3)
gsize(bacon3)
head(nroles[order(-nroles)], 5) #largest nroles
distances(actnet, v=V(actnet)["Bacon, Kevin"], to=V(actnet)["Hanks, Tom"], weights=NA)#started shortest path
head(nroles[order(-nroles)], 5) #largest nroles
distances(actnet, v=V(actnet)["Bacon, Kevin"], to=V(actnet)["Hanks, Tom"], weights=NA)#started shortest path
# All shortest paths
all_shortest_paths(actnet, from="Bacon, Kevin", to="Hanks, Tom")
# pick one
PtoA <- get.shortest.paths(actnet, from="Bacon, Kevin", to="Hanks, Tom")
head(nroles[order(-nroles)], 5) #largest nroles
distances(actnet, v=V(actnet)["Bacon, Kevin"], to=V(actnet)["Hanks, Tom"], weights=NA)#started shortest path
# All shortest paths
all_shortest_paths(actnet, from="Bacon, Kevin", to="Hanks, Tom")
# pick one
PtoA <- get.shortest.paths(actnet, from="Bacon, Kevin", to="Hanks, Tom")
PtoA
View(PtoA)
head(nroles[order(-nroles)], 5) #largest nroles
distances(actnet, v=V(actnet)["Bacon, Kevin"], to=V(actnet)["Hanks, Tom"], weights=NA)#started shortest path
# All shortest paths
all_shortest_paths(actnet, from="Bacon, Kevin", to="Hanks, Tom")
# pick one
BaconHanksPaths <- get.shortest.paths(actnet, from="Bacon, Kevin", to="Hanks, Tom")
V(actnet)$name[BaconHanksPaths$vpath[[1]]]
head(nroles[order(-nroles)], 5) #largest nroles
distances(actnet, v=V(actnet)["Bacon, Kevin"], to=V(actnet)["Hanks, Tom"], weights=NA)#started shortest path
#copied some of her code from her firenze example
# All shortest paths
all_shortest_paths(actnet, from="Bacon, Kevin", to="Hanks, Tom")
# pick one
BaconHanksPaths <- get.shortest.paths(actnet, from="Bacon, Kevin", to="Hanks, Tom")
V(actnet)$name[BaconHanksPaths$vpath[[1]]]
#not sure what to describe here bc the edge length is one, and it's not like we can describe what movies they shared based on this. I guess we could pick a less common pair that hopefully have two edges to describe better.
E(actnet)$width <- 2
E(actnet)$color <- "grey"
E(actnet, path=BaconHanksPaths$vpath[[1]])$color <- "green"
plot(actnet)
actorrules <- apriori(actnet,
parameter=list(support=.01, confidence=.5, maxlen=3))
##not in right format, will need to fix
##this is from lastfm example
actorrules <- apriori(casttrans,
parameter=list(support=.01, confidence=.5, maxlen=3))
actorrules <- apriori(casttrans,
parameter=list(support=.01, confidence=.5, maxlen=3))
inspect(actorrules)
actorrules <- apriori(casttrans,
parameter=list(support=.01, confidence=.5, maxlen=3))
inspect(actorrules)
View(actorrules)
actorrules <- apriori(casttrans,
parameter=list(support=.01, confidence=.1, maxlen=3))
inspect(actorrules)
actorrules <- apriori(casttrans,
parameter=list(support=.01, confidence=.1, maxlen=2))
inspect(actorrules)
actorrules <- apriori(casttrans,
parameter=list(support=.01, confidence=.1, maxlen=2))
#inspect(actorrules)
actorrules <- apriori(casttrans,
parameter=list(support=.01, confidence=.1, maxlen=2))
inspect(actorrules)
View(actlink)
View(actmat)
actorrules <- apriori(casttrans,
parameter=list(support=.01, confidence=.01, maxlen=2))
inspect(actorrules)
##got this code from lastfm.r but there are just no rules created??
##not sure what's going wrong here
View(casttrans)
actorrules <- apriori(casttrans, parameter=list(support=.01, confidence=.1, maxlen=2))
inspect(actorrules)
##got this code from lastfm.r but there are just no rules created??
##not sure what's going wrong here, I don't think I'm using the wrong input to this.
casttrans
castsize
25.
actorrules <- apriori(casttrans, parameter=list(support=.001, confidence=.1, maxlen=2))
inspect(actorrules)
##got this code from lastfm.r but there are just no rules created??
##not sure what's going wrong here, I don't think I'm using the wrong input to this.
actorrules <- apriori(casttrans, parameter=list(support=.0001, confidence=.1, maxlen=2))
inspect(actorrules)
actorrules <- apriori(casttrans, parameter=list(support=.0001, confidence=.1, maxlen=2))
inspect(actorrules)
##probably need to next extract rules as strings, change into edge matrix,
pairs <- labels(artrules)
actorrules <- apriori(casttrans, parameter=list(support=.0001, confidence=.1, maxlen=2))
inspect(actorrules)
##probably need to next extract rules as strings, change into edge matrix,
pairs <- labels(actorrules)
pairs <- gsub("\\{|\\}","",pairs)
pairs <- strsplit(pairs," => ")
pairs <- do.call(rbind,pairs)
pairs <- pairs[pairs[,1]!="",] # no lhs
actorrules <- apriori(casttrans, parameter=list(support=.0001, confidence=.1, maxlen=2))
inspect(actorrules)
##probably need to next extract rules as strings, change into edge matrix,
pairs <- labels(actorrules)
pairs
pairs <- gsub("\\{|\\}","",pairs)
pairs
pairs <- strsplit(pairs," => ")
pairs
pairs <- do.call(rbind,pairs)
pairs
pairs <- pairs[pairs[,1]!="",] # no lhs
actorrules <- apriori(casttrans, parameter=list(support=.0001, confidence=.1, maxlen=2))
inspect(actorrules)
##probably need to next extract rules as strings, change into edge matrix,
pairs <- labels(actorrules)
pairs <- gsub("\\{|\\}","",pairs)
pairs <- strsplit(pairs," => ")
pairs <- do.call(rbind,pairs)
pairs <- pairs[pairs[,1]!="",]
rulenet <- graph.edgelist(pairs)
rulenet <- as.undirected(rulenet)
plot(rulenet, vertex.label=NA, vertex.size=3, edge.curved=FALSE)
actorrules <- apriori(casttrans, parameter=list(support=.0001, confidence=.1, maxlen=2))
inspect(actorrules)
##probably need to next extract rules as strings, change into edge matrix,
pairs <- labels(actorrules)
pairs <- gsub("\\{|\\}","",pairs)
pairs <- strsplit(pairs," => ")
pairs <- do.call(rbind,pairs)
pairs <- pairs[pairs[,1]!="",]
rulenet <- graph.edgelist(pairs)
rulenet <- as.undirected(rulenet)
#plot(rulenet, vertex.label=NA, vertex.size=3, edge.curved=FALSE)
## look at some measures of connectivity
mbetween <- betweenness(rulenet)
mdegree <- degree(rulenet)
which.max(mbetween)
which.max(mdegree)
## and raw popularity
#playcount <- table(lastfm$artist)[names(mdegree)]
#plot(mdegree,mbetween,log="xy")
#plot(as.numeric(playcount),mdegree,log="xy")
